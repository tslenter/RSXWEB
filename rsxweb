#!/bin/bash

#License:
#"Remote Syslog" is a free application what can be used to view syslog messages.
#Copyright (C) 2022 Tom Slenter
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program. If not, see <http://www.gnu.org/licenses/>.
#
#For more information contact the author:
#Name author: Tom Slenter
#E-mail: info@remotesyslog.com

#Variables
RSPATH=$(pwd)
RSDEST=/opt/RSXWEB
RSECORE=/opt/RSECORE
SYSLOGCONF=/etc/syslog-ng/conf.d
APACHCONF=/var/www/html
APACONFIG=/etc/apache2/sites-available
RSBIN=/usr/bin
APACHPHP=/etc/php/7.[0-9]/apache2
RSTMP=/tmp

#Banner
function banner() {
    echo ""
    echo "##################################################"
    echo "#Remote Syslog X                                 #"
    echo "#More information: https://www.remotesyslog.com  #"
    echo "#Remote Syslog installation                      #"
    echo "#Version: RSX 0.1                                #"
    echo "#Donations: https://github.com/tslenter/RSXWEB   #"
    echo "##################################################"
    echo ""
}

#Check if user is root
if ! [ $(id -u) = 0 ]; then
    clear
    banner
    echo "This installation must be run as root!"
    echo ""
    exit 1
fi

#Functions to check files, packages ...
function check_package() {
echo "Check package $1"
dpkg-query -l $1 > /dev/null 2>&1
if [ $? = 0 ]
then
    echo "Installation found ..."
else
    echo "Installation failed, abort (Hint: Did you install the core? ..."
    exit
fi
}

#Check if file exist
function check_file() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, continue installation ..."
    else
        echo "File: $1 does not exist, exit ..."
        exit
    fi
}

#Check files in reverse
function check_file_reverse() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, module already installed? Exiting ..."
        exit
    else
        echo "File: $1 does not exist, continue installation ..."
    fi
}

#Check file for GUI based functions
function check_file_gui() {
    file=$1
    if [ -e "$file" ]; then
        echo "File: $1 exists, other GUI installed? Exiting ..."
        exit
    else
        echo "File: $1 does not exist, continue installation ..."
    fi
}

#Installation RSX
function rsxinstall() {
#Check installation
    echo "Check if Raspberry Pi ..."
    drel="$(lsb_release -a | egrep 'Description:')"
    echo "$drel found ..."
    if [[ $drel =~ "Raspbian" ]]; then
        echo "Raspberry Pi detected, RSX unsupported ..."
        echo "It is to slow and is missing some packages ..."
        echo "Abort ..."
        exit
    else
        echo "Continue ..."
    fi
    echo "Check GUI ..."
    check_file_gui $APACHCONF/rsc/index.php
    check_file_reverse $APACONFIG/rsx-apache.conf
    echo "Check if RSC is installed ..."
    check_file_reverse $APACHCONF/rsc/index.php
    echo "Check if RSE is installed ..."
    check_file_reverse $APACHCONF/rse/index.php
#Install packages
    echo "Install required packages ..."
    apt install libapache2-mod-authnz-external php apache2 libapache2-mod-authz-unixgroup php-cli libpam0g-dev php-pear php-dev libapache2-mod-php build-essential liblog4j2-java -y
    check_package "libapache2-mod-authnz-external"
    check_package "apache2"
    check_package "php"
    check_package "libapache2-mod-authz-unixgroup"
    check_package "php-cli"
    check_package "libapache2-mod-php"
    check_package "libpam0g-dev"
    check_package "php-pear"
    check_package "php-dev"
    check_package "build-essential"
    check_package "liblog4j2-java"
#Load apache modules
    echo "Load modules ..."
    a2enmod proxy
    a2enmod proxy_http
    a2enmod headers
    a2enmod authnz_external
    a2enmod authz_unixgroup
    a2enmod rewrite
    a2enmod ssl
    a2enmod session
    a2enmod auth_form
    a2enmod request
    a2enmod session_cookie
    a2enmod session_crypto
#Install Kibana
    echo "Install Kibana ..."
    apt update && apt install kibana -y
#Check config
    elc="$(cat /etc/elasticsearch/elasticsearch.yml | grep cluster.name:.rsx | head -n 1)"
    if [[ $elc == *"cluster.name: rsx"* ]]; then
        echo "Config already written ..."
    else
        echo "Something is wrong, exit ..."
    fi
    echo "Check repo ..."
    if [ -e "/etc/apt/sources.list.d/elastic-7.x.list" ]; then
        echo "Nothing to do ..."
    else
        echo "Something is wrong, exit ..."
    fi
#Write config
    kic="$(cat /etc/kibana/kibana.yml | grep server.rewriteBasePath:.true | head -n 1)"
    if [[ $kic == *"server.rewriteBasePath: true"* ]]; then
        echo "Config already written ..."
    else
        echo "Write kibana config ..."
        echo 'server.rewriteBasePath: true' >> /etc/kibana/kibana.yml
        echo 'server.basePath: "/kibana"' >> /etc/kibana/kibana.yml
        echo 'server.publicBaseUrl: "http://127.0.0.1:5601/kibana"' >> /etc/kibana/kibana.yml
    fi
#Activate service on boot
    echo "Activate startup log configuration ..."
    systemctl enable kibana
#Reload services
    echo "Activate start/reload configuration ..."
    service kibana start
#Activate SSL
    echo "Activate SSL ..."
#Setup variables:
    varfullservername=$(host -TtA $(hostname -s)|grep "has address"|awk '{print $1}')
    certpath=/etc/cert/
    echo "Create .rnd file ..."
    touch $HOME/.rnd
    echo "Certificate auto request for linux webservers!"
    echo "Powered by RSX ..."
    echo "Generate Certificate ..."
    if [ -f $HOME/.rnd ]; then
        echo "File $HOME/.rnd exists ..."
        openssl req -new -x509 -days 3650 -sha256 -newkey rsa:2048 -subj "/C=NL/ST=Limburg/L=Maastricht/O=IT/CN=$varfullservername" -nodes -keyout $HOME/$varfullservername.key -out $HOME/$varfullservername.crt
        echo "Copy SSL certificates ..."
        if [ -d $certpath ]; then
            echo "Directory already exist ..."
        else
            mkdir $certpath
            echo "Directory created ..."
        fi
       cp $HOME/$varfullservername.key $certpath/rs.key
       cp $HOME/$varfullservername.crt $certpath/rs.crt
       echo "Setup permissions ..."
       chmod 600 $certpath/rs.key
       echo "Clean up ..."
       rm -rf $HOME/$varfullservername.key
       rm -rf $HOME/$varfullservername.crt
       echo "Generated key file: $certpath/rs.key"
       echo "Generated cert file: $certpath/rs.crt"
       check_file $certpath/rs.key
       check_file $certpath/rs.crt
    else
       echo "No .rnd found ..."
    fi
#Proxy setup
    echo "Activate proxy ..."
    echo "Disable default config ..."
    cp -rf $RSDEST/config/rsx-apache.conf $APACONFIG/rsx-apache.conf
    check_file $APACONFIG/rsx-apache.conf
    a2ensite rsx-apache
    a2dissite eonly-apache
    a2dissite 000-default
#Remove default webpage
    echo "Remove default GUI website ..."
    if [ -e "$APACHCONF/index.html" ]; then
        echo "File: $APACHCONF/index.html exists, remove file ..."
        rm -rf $APACHCONF/index.html
    else
        echo "File: $APACHCONF/index.html does not exist, continue installation ..."
    fi
#Create login website
    echo "Create login for webpages ..."
    cp -rf $RSDEST/web/* $APACHCONF/
    check_file_reverse $APACHCONF/index.html
    check_file $APACHCONF/login.php
    check_file $APACHCONF/index.php
    check_file $APACHCONF/logo.png
    check_file $APACHCONF/favicon.ico
    check_file $APACHCONF/style.css
    check_file $APACHCONF/fontawesome/css/all.css
    echo "Reload apache services ..."
    service apache2 restart
#Final message
    echo "RSX installation done ..."
}

function kibdef() {
    check_package "kibana"
    curlcheck="$(dpkg-query -l curl | egrep '<none>')"
    if [[ $curlcheck =~ "<none>" ]]; then
        echo "curl missing ..."
        apt install curl -y
    else
        echo "Installation found ..."
    fi
    check_package "curl"
    echo "Wait 120 sec for API activation ..."
    for i in {120..01};
        do $l;
        echo -n "$i ";
        sleep 1;
    done
    urlstatus="$(curl -XGET http://localhost:5601/kibana/status -I | egrep 200)"
    if [[ $urlstatus =~ "200" ]]; then
        echo "Kibana 200 code found ..."
        echo "Trying to setup kibana for first use ..."
        echo "Send test message ..."
        rseview -t
        echo "Activate darkmodes ..."
        curl -XPOST -H "Content-Type: application/json" -H "kbn-xsrf: true" localhost:5601/kibana/api/kibana/settings/theme:darkMode -d '{"value": "true"}'
        echo "Set index for Kibana ..."
        curl -X POST "http://localhost:5601/kibana/api/saved_objects/index-pattern/rse-syslog-ng*" -H 'kbn-xsrf: true' -H 'Content-Type: application/json' -d'
        {
            "attributes": {
            "title": "rse-syslog*",
            "timeFieldName": "@timestamp"
            }
        }
        '
        echo "Setup is done ..."
    else
        echo "Kibana not in time activated? Use GUI to setup kibana ..."
    fi
}

#RSX removal
function rsxremove() {
#Basic check
    echo "Check if RSC is installed ..."
    check_file_reverse $APACHCONF/rsc/index.php
    echo "Check if RSE is installed ..."
    check_file_reverse $APACHCONF/rse/index.php
    check_file_gui $APACHCONF/rse/rse.php
    check_file_gui $APACHCONF/rsc/index.php
#Remove Apache config
    a2ensite eonly-apache
    a2dissite rsx-apache
    rm -rf $APACONFIG/rsx-apache.conf
    rm -rf $APACHPHP/conf.d/20-pam.ini
    rm -rf $APACHCONF/*
    service apache2 restart
#Remove packages
    echo "Remove config ..."
    rm -rf /etc/kibana/kibana.yml
    echo "Remove packages ..."
    apt -y purge kibana -y
    echo "Remove old kibana config ..."
    rm -rf /etc/kibana
    rm -rf /var/lib/kibana
    echo "RSX removed ..."
}

#Upgrade function
function guiupgrade() {
    echo "Check if Remote Syslog Core and web is installed ..."
    echo "Check if RSC is installed ..."
    check_file_reverse $APACHCONF/rsc/index.php
    echo "Check if RSE is installed ..."
    check_file_reverse $APACHCONF/rse/index.php
    check_file $RSECORE/rsecore
    check_file $RSDEST/rsxweb
    echo "Starting upgrade ..."
    echo "Download installation ..."
    git clone --branch main https://github.com/tslenter/RSXWEB $RSTMP/RSXWEB
    echo "Check if download is successfull ..."
    if [ -d "$RSTMP/RSXWEB" ]; then
         echo "Continue installation ..."
    else
         echo "Clone not successfull ..."
         exit
    fi
    cp -rf $RSTMP/RSXWEB/* $RSDEST
    rm -rf $RSTMP/RSXWEB
#Check packages
    if [ -e $APACONFIG/rsx-apache.conf ]; then
        echo "Check packages ..."
        check_package "apache2"
        check_package "apache2-utils"
        check_package "php"
        check_package "libapache2-mod-php"
        check_package "apache2"
        check_package "apache2-utils"
        check_package "php"
        check_package "libapache2-mod-php"
        check_package "libapache2-mod-authnz-external"
        check_package "libapache2-mod-authz-unixgroup"
        check_package "php-cli"
        check_package "libapache2-mod-php"
        check_package "libpam0g-dev"
        check_package "php-pear"
        check_package "php-dev"
        check_package "build-essential"
        #Enable if required, but any custom apache2 config will be lost
        #echo "Copy new apache config ..."
        #cp -rf $RSDEST/web/rsx-apache.conf $APACONFIG/rsx-apache.conf
        check_file $APACONFIG/rsx-apache.conf
        cp -rf $RSDEST/web/* $APACHCONF/
        check_file_reverse $APACHCONF/index.html
        check_file $APACHCONF/login.php
        check_file $APACHCONF/index.php
        check_file $APACHCONF/logo.png
        check_file $APACHCONF/favicon.ico
        check_file $APACHCONF/fontawesome/css/all.css
        check_file $APACHCONF/style.css
        echo "Restarting Apache ..."
        service apache2 restart
        echo "Upgrade GUI done ..."
    else
        echo "No RSX found, upgrade rejected ..."
    fi
}

#Check minimum requirements
function pre_install() {
	echo "Check packages installations  ..."
	check_package "syslog-ng"
	check_package "wget"
	check_package "git"
	check_package "elasticsearch"
	check_file "$RSBIN/rseview"
	check_file "$RSECORE/rsecore"
}

#Thank you message
function quit() {
    echo "Thank you for using Remote Syslog ..."
}

clear
echo "Setting up environment ..."
echo "Check 1 ..."
if [ -e $RSPATH/rsxweb ]; then
    echo "rsxweb found in local directory, copy to $RSDEST started ..."
    if [ -d $RSDEST ]; then
        echo "Directory already exist ..."
    else
        mkdir $RSDEST
        echo "Directory created ..."
    fi
    cp -rf $RSPATH/* $RSDEST
elif [ -e $RSBIN/rseweb ]; then
    echo "rseweb run from $RSBIN, going for $RSDEST environment ..."
else
    echo "Did you run the installer from the right directory? ..."
fi

clear
banner
#Menu
PS3='Please enter your choice: '
options=("Upgrade RSX WEB" "Install RSX WEB" "Remove RSX WEB" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Upgrade RSX WEB")
            clear
            banner
            pre_install
            guiupgrade
            quit
            exit
    ;;
        "Install RSX WEB")
            clear
            banner
            pre_install
            rsxinstall
            kibdef
            quit
            exit
    ;;
        "Remove RSX WEB")
            clear
            banner
            rsxremove
            quit
            exit
    ;;
        "Quit")
            quit
            break
    ;;
        *) echo "Invalid option $REPLY ..." ;;
    esac
done
